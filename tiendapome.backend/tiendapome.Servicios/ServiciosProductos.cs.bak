using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

using Newtonsoft.Json;

using tiendapome.Entidades;
using tiendapome.Repository;
using tiendapome.Servicios.Cache;

namespace tiendapome.Servicios
{
    public class ServiciosProductos : AbstractService
    {
        const string gobalKeyCache = "TiendaPome";

        public ServiciosProductos() { }

        #region Tipo
        public List<Tipo> TipoObtenerVigentesCache()
        {
            ServicioGenerico servicio = new ServicioGenerico();
            List<Tipo> listReturn = new List<Tipo>();

            var tiposCache = CacheManager.GetToCache<List<Tipo>>(gobalKeyCache, "GetTipos");

            if (tiposCache == null)
            {
                //junto los tipos del mayorista con los del propio carrito
                listReturn.AddRange(this.TipoObtenerDelMayorista());
                listReturn.AddRange(servicio.Listar<Tipo>().ToList<Tipo>());
                if (listReturn == null) listReturn = new List<Tipo>();
                CacheManager.AddToCache(gobalKeyCache, "GetTipos", listReturn);
            }
            else
            {
                listReturn = tiposCache;
            }

            return listReturn.OrderBy(item => item.Descripcion).ToList<Tipo>();
        }
        private List<Tipo> TipoObtenerDelMayorista()
        {
            ServicioGenerico servicio = new ServicioGenerico();
            List<Tipo> listReturn = new List<Tipo>();
            string urlMayorista = servicio.ParametroObtenerValor("URL_MAYORISTA");
            if (!string.IsNullOrEmpty(urlMayorista))
            {
                urlMayorista += "api/tipo";
                using(WebClient webClient = new WebClient())
                {
                    var json = webClient.DownloadString(urlMayorista);
                    listReturn = JsonConvert.DeserializeObject<List<Tipo>>(json);
                }
                
            }
            return listReturn;
        }
        public List<Tipo> TipoListar( bool listarABM)
        {
            List<Tipo> listReturn =null;
            if (listarABM)
                listReturn = this.ListarVigentes<Tipo>();
            else
                listReturn = this.TipoObtenerVigentesCache().OrderBy(item => item.Descripcion).ToList<Tipo>();
                        
            listReturn.ForEach(delegate(Tipo tipo)
            {
                int cantCategorias = 0;
                int cantSubcategorias = 0;
                tipo.Categorias.ToList<Categoria>().ForEach(delegate(Categoria categoria)
                {
                    cantCategorias++;
                    categoria.Subcategorias.ToList<Subcategoria>().ForEach(delegate(Subcategoria subcategoria)
                    {
                        cantSubcategorias++;
                        //List<Producto> listProds = this.ProductoObtenerVigentesCache().Where(item => item.Subcategoria.Id == subcategoria.Id).ToList<Producto>();
                        //subcategoria.CantidadProductos = listProds != null ? listProds.Count : 0;
                        subcategoria.CantidadProductos = 1;
                    });
                });
                tipo.SinCategorias = (cantCategorias == 1 && cantSubcategorias == 1);
            });

            return listReturn;
        }


        public Subcategoria SubcategoriaObtenerCache(int id)
        {
            Subcategoria subcateReturn = null;
            this.TipoObtenerVigentesCache().ForEach(delegate(Tipo tipo) 
            {
                tipo.Categorias.ToList<Categoria>().ForEach(delegate(Categoria catego) 
                {
                    catego.Subcategorias.ToList<Subcategoria>().ForEach(delegate(Subcategoria subcate) 
                    {
                        if (subcate.Id == id)
                        {
                            subcateReturn = subcate;
                            return;
                        }                            
                    }); 
                }); 
            });
            return subcateReturn;
        }

        #endregion

        #region Producto
        public List<Producto> ProductoObtenerVigentesCache()
        {   
            List<Producto> listProds = new List<Producto>();
            var productosCache = CacheManager.GetToCache<List<Producto>>(gobalKeyCache, "GetProductos");
            if (productosCache == null)
                listProds = this.ProductoActualizarCache();
            else
                listProds = productosCache;
            return listProds;
        }
        public List<Producto> ProductoActualizarCache()
        {
            ProductoRepository repository = new ProductoRepository();
            
            List<Producto> listProds = repository.ObtenerTodosVigentes().ToList<Producto>();
            CacheManager.AddToCache(gobalKeyCache, "GetProductos", listProds);

            return listProds;
        }
        private List<Producto> ProductoObtenerDelMayorista(bool conStock, int idSubcategoria, int idCliente)
        {
            ServicioGenerico servicio = new ServicioGenerico();
            ProductoList prodsMayorista = null;
            List<Producto> listReturn = new List<Producto>();

            string urlMayorista = servicio.ParametroObtenerValor("URL_MAYORISTA");
            if (!string.IsNullOrEmpty(urlMayorista))
            {

                string keyItem = string.Format("GetProductosMayorista{0}{1}", conStock.ToString(), idSubcategoria.ToString());
                var prodsMayoristaCache = CacheManager.GetToCache<string>(gobalKeyCache, keyItem);
                
                if (prodsMayoristaCache == null)
                {
                    urlMayorista += string.Format("api/producto/listar/{0}/{1}/{2}/1/250", conStock, idSubcategoria, idCliente);
                    using (WebClient webClient = new WebClient())
                    {
                        prodsMayoristaCache = webClient.DownloadString(urlMayorista);
                        CacheManager.AddToCache(gobalKeyCache, keyItem, prodsMayoristaCache);
                    }
                }

                if (prodsMayoristaCache != null)
                {
                    prodsMayorista = JsonConvert.DeserializeObject<ProductoList>(prodsMayoristaCache);
                    listReturn = prodsMayorista.Productos;
                    listReturn.ForEach(item => item.StockPropio = false);
                }

            }
            return listReturn;
        }
        public ProductoList ProductoBusqueda(string buscar, bool soloCodigo, int numeroPagina, int cantidadRegistros)
        {
            ProductoRepository repository = new ProductoRepository();
            List<Producto> listProdsTotal = new List<Producto>();
            List<Producto> listProds = new List<Producto>();
            
            if (soloCodigo)
            {
                listProdsTotal.Add(this.ObtenerObjeto<Producto>("Codigo", buscar.ConvertirInt()));
                listProds.Add(this.ObtenerObjeto<Producto>("Codigo", buscar.ConvertirInt()));
            }
            else
            {
                listProdsTotal = repository.BuscarProductos(buscar, false, numeroPagina,cantidadRegistros);
                listProds = repository.BuscarProductos(buscar, true, numeroPagina, cantidadRegistros);
            }

            ProductoList listReturn = new ProductoList();
            listReturn.TotalFilas = listProdsTotal.Count;
            listReturn.Productos = listProds;
            return listReturn;
        }

        public ProductoList ProductoListarABM(int idSubcategoria, int numeroPagina, int cantidadRegistros)
        {
            //este metodo no lee los datos del Cache
            ServicioGenerico servGenerico = new ServicioGenerico();

            ProductoRepository repository = new ProductoRepository();
            List<Producto> listProds = new List<Producto>();
            
            string url_host = servGenerico.ParametroObtenerValor("URL_HOST");
            
            
            List<Producto> listProdsFull = new List<Producto>();

            bool paginar = (numeroPagina != -1 && cantidadRegistros != -1);

            listProdsFull.AddRange(this.Listar<Producto>("Subcategoria.Id", idSubcategoria)
                                        .ToList<Producto>());

            int totalFilas = listProdsFull.Count;

            if (paginar)
            {
                int nro_fila = 1;
                listProdsFull.ForEach(delegate(Producto item)
                {
                    item.NroFila = nro_fila;
                    nro_fila++;
                });
                int filaDesde = (numeroPagina - 1) * cantidadRegistros;
                int filaHasta = filaDesde + cantidadRegistros;
                listProds = listProdsFull.FindAll(item => item.NroFila > filaDesde && item.NroFila <= filaHasta);
            }
            else
            {
                listProds = listProdsFull;
            }


            listProds.ForEach(delegate(Producto prod)
            {
                /*URL DE LA FOTO*/
                if (prod.Foto != null)
                    prod.FotoLink = string.Format("{0}{1}{2}{3}", url_host, "assets/fotos", prod.Path, prod.Foto);
                                
            });

            ProductoList listReturn = new ProductoList();
            listReturn.TotalFilas = totalFilas;
            listReturn.Productos = listProds;
            return listReturn;
        }

        public ProductoList ProductoListarCarrito(bool conStock, int idSubcategoria, int idCliente, int numeroPagina, int cantidadRegistros)
        {
            ServiciosPedido servPedido = new ServiciosPedido();
            ServicioGenerico servGenerico = new ServicioGenerico();

            ProductoRepository repository = new ProductoRepository();
            List<Producto> listProds = new List<Producto>();
            List<PedidoItem> pedidoItems = new List<PedidoItem>();

            /* MONEDA_VENTA => Se parametriza desde el ABM de Cotizaciones
             * valores posibles
             * * PESO_ARGENTINO 
             * * DOLAR_EEUU 
             */

            /*Parametros del sistema*/
            string monedaVenta = servGenerico.ParametroObtenerValor("MONEDA_VENTA");
            string url_host = servGenerico.ParametroObtenerValor("URL_HOST");
            string myIdCliente = servGenerico.ParametroObtenerValor("TRADING_ID_CLIENTE");

            List<ClienteLista> listaCliente = null;

            if (idCliente > 0)
            {
                ServicioClientes servClientes = new ServicioClientes();
                listaCliente = servClientes.ClienteListaObtenerVigentesCache()
                                                        .Where(item => item.IdCliente == idCliente)
                                                        .ToList<ClienteLista>();
                //Pedido pedido = servPedido.PedidoObtenerClienteIngresado(idCliente, -1, -1);
            }
            else
            {
                //cuando se muestra el carrito a usuarios no registrados se fuerza PESO_ARGENTINO
                monedaVenta = "PESO_ARGENTINO";
            }

            decimal cotizacionDolar = this.CotizacionDolarVigente().Cotizacion;

            List<Producto> listProdsFull = new List<Producto>();

            

            listProdsFull.AddRange(this.ProductoObtenerDelMayorista(conStock, idSubcategoria, myIdCliente.ConvertirInt()));

            listProdsFull.AddRange(this.ProductoObtenerVigentesCache()
                                        .Where(item => item.Stock == (conStock ? 1 : item.Stock) && item.Subcategoria != null && item.Subcategoria.Id == idSubcategoria)
                                        .ToList<Producto>());

            int totalFilas = listProdsFull.Count;

            bool paginar = (numeroPagina != -1 && cantidadRegistros != -1);

            if (paginar)
            {
                int nro_fila = 1;
                listProdsFull.ForEach(delegate(Producto item)
                {
                    item.NroFila = nro_fila;
                    nro_fila++;
                });
                int filaDesde = (numeroPagina - 1) * cantidadRegistros;
                int filaHasta = filaDesde + cantidadRegistros;
                listProds = listProdsFull.FindAll(item => item.NroFila > filaDesde && item.NroFila <= filaHasta);
            }
            else
            {
                listProds = listProdsFull;
            }
                        

            listProds.ForEach(delegate(Producto prod)
            {
                if (prod.StockPropio)
                    prod = ProcesarStockPropio(listaCliente, url_host, prod);
                else
                    prod = ProcesarStockMayorista(idCliente, prod);

                prod.MonedaVenta = monedaVenta == "DOLAR_EEUU" ? "USD" : "$";
                if (monedaVenta != "DOLAR_EEUU")
                    prod.PrecioUnitarioFinal = Decimal.Round(prod.PrecioUnitarioProcesado * cotizacionDolar, 2);
                else
                    prod.PrecioUnitarioFinal = Decimal.Round(prod.PrecioUnitarioProcesado, 2);


                prod.CantidadPedido = 0;
                prod.ProductoPedido = false;               
               
            });        

            ProductoList listReturn = new ProductoList();
            listReturn.TotalFilas = totalFilas;
            listReturn.Productos = listProds;
            return listReturn;
        }

        public Producto ProcesarStockPropio(List<ClienteLista> listaCliente, string url_host, Producto prod)
        {
            /*URL DE LA FOTO*/
            if (prod.Foto != null)
                prod.FotoLink = string.Format("{0}{1}{2}{3}", url_host, "assets/fotos", prod.Path, prod.Foto);
            
            /*CALCULO DEL PRECIO SEGUN LISTA*/
            ServiciosPedido servPedido = new ServiciosPedido();
            decimal precioListaCliente = servPedido.DamePrecioListaCliente(listaCliente, prod);
            
            //determinar precio del producto puede ser de la lista del producto o la asignada al cliente            
            decimal precio = 0;

            if (precioListaCliente != -1)
            {
                if (prod.PrecioPorPeso)
                    precio = precioListaCliente;
                else
                    precio = prod.PrecioUnitario - ((precioListaCliente * prod.PrecioUnitario) / 100);
            }
            else
            {
                if (prod.PrecioPorPeso)
                    precio = prod.ListaPrecio.Precio;
                else
                    precio = prod.PrecioUnitario;
            }

            prod.PrecioUnitarioProcesado = precio;

            return prod;
        }

        public Producto ProcesarStockMayorista(int idCliente, Producto prod)
        {            
            /*URL DE LA FOTO*/
            /*Se usa la URL del mayorista*/
            ServicioGenerico servGenerico = new ServicioGenerico();
            decimal myGanancia = servGenerico.ParametroObtenerValor("PORC_GANANCIA_GRAL").ConvertirDecimal();
            
            //Para revendedor, el precio unitario es el precio final del mayorista mas la ganancia
            prod.PrecioUnitario = prod.PrecioUnitarioFinal;

            if (myGanancia > 0)
                prod.PrecioUnitario = prod.PrecioUnitarioFinal + ((prod.PrecioUnitarioFinal * myGanancia) / 100);

            /*CALCULO DEL PRECIO SEGUN LISTA*/
            ServiciosPedido servPedido = new ServiciosPedido();
            decimal precioListaCliente = servPedido.DamePrecioListaClienteMayorista(idCliente);

            decimal precio = 0;         
   
            //Aplicamos descuento para clientes que tengan asignada lista
            if (precioListaCliente != -1)
                precio = prod.PrecioUnitario - ((precioListaCliente * prod.PrecioUnitario) / 100);
            else
                precio = prod.PrecioUnitario;

            prod.PrecioUnitarioProcesado = precio;

            return prod;
        }


        public Producto ProductoMayoristaGrabar(Producto datoGraba)
        {
            ProductoRepository repository = new ProductoRepository();

            Producto dato = repository.ObtenerProductoMayorista(datoGraba.Codigo);
            if (dato == null) dato = new Producto();
                        
            dato.Vigente = true;
            dato.Codigo = datoGraba.Codigo;
            dato.Descripcion = datoGraba.Descripcion;
            dato.Peso = datoGraba.Peso;
            dato.TipoPrecio = datoGraba.TipoPrecio;
            dato.PrecioUnitario = datoGraba.PrecioUnitarioFinal;
            dato.StockPropio = false;
            dato.FotoLink = datoGraba.FotoLink;
            
            repository.Actualizar(dato);

            return dato;
        }

        public Producto ProductoGrabar(Producto datoGraba, string carpetaFoto)
        {
            ServicioGenerico servGenerico = new ServicioGenerico();
            ProductoRepository repository = new ProductoRepository();
            Producto dato;

            string pathOrigen = string.Empty;

            if (datoGraba.Id == -1)
            {
                dato = new Producto();
                string codigoAutomatico = servGenerico.ParametroObtenerValor("CODIGO_AUTOMATICO");
                string primerCodigo = servGenerico.ParametroObtenerValor("PRIMER_CODIGO_AUTOMATICO");

                if (codigoAutomatico != null && codigoAutomatico.Equals("SI"))
                {
                    Producto ultimo = repository.ObtenerUltimoProducto();
                    if (ultimo == null)
                        dato.Codigo = primerCodigo.ConvertirInt();
                    else
                        dato.Codigo = ultimo.Codigo + 1;
                }
            }
            else
            {
                dato = repository.Obtener(datoGraba.Id);
                if (dato == null) throw new ApplicationException("No existe Producto");
                pathOrigen = dato.Path;
            }

            if (datoGraba.Foto.Trim() != string.Empty)
            {
                Producto validar = null;
                validar = repository.Obtener("Foto", datoGraba.Foto);
                if (validar != null && validar.Id != datoGraba.Id)
                    throw new ApplicationException("Ya existe un producto con la misma foto");
            }
                        
            dato.Vigente = true;
            dato.Descripcion = datoGraba.Descripcion;
            
            dato.Peso = datoGraba.Peso;
            dato.TipoPrecio = datoGraba.TipoPrecio;
            
            if (dato.PrecioPorPeso)
                dato.PrecioUnitario = 0;
            else
                dato.PrecioUnitario = datoGraba.PrecioUnitario;

            dato.Ubicacion = datoGraba.Ubicacion;
            dato.Foto = datoGraba.Foto;
            dato.Subcategoria = datoGraba.Subcategoria;
            dato.ListaPrecio = datoGraba.ListaPrecio;
            dato.Stock = datoGraba.Stock;
            dato.StockPropio = true;

            repository.Actualizar(dato);

            dato = this.ObtenerObjeto<Producto>(dato.Id);

            if (dato.Foto.Trim() != string.Empty && pathOrigen != dato.Path)
            {
                string pathRoot = carpetaFoto.Substring(0, carpetaFoto.Length - 1);
                string fileOrigen = string.Format("{0}{1}{2}", pathRoot, pathOrigen, dato.Foto);
                string fileDestino = string.Format("{0}{1}{2}", pathRoot, dato.Path, dato.Foto);
                FileHelper.CopyFile(fileOrigen.Replace(@"/", @"\"), fileDestino.Replace(@"\", @"/"), true);
                FileHelper.DeleteFile(fileOrigen);
            }

            CacheManager.RemoveToCache(gobalKeyCache);
            return dato;
        }

        public Producto ProductoEliminar(int id)
        {
            ProductoRepository repository = new ProductoRepository();
            Producto dato;

            dato = repository.Obtener(id);

            if (dato == null)
                throw new ApplicationException("No existe Producto");
            
            repository.Eliminar(dato);

            CacheManager.RemoveToCache(gobalKeyCache);
            return dato;
        }
        public Producto ProductoSinStock(int id)
        {
            ProductoRepository repository = new ProductoRepository();
            Producto dato;

            dato = repository.Obtener(id);

            if (dato == null)
                throw new ApplicationException("No existe Producto");

            dato.Stock = 0;
            
            repository.Actualizar(dato);
            CacheManager.RemoveToCache(gobalKeyCache);
            return dato;
        }
        #endregion
        
        #region ListaPrecio por Producto
        public ListaPrecio ListaPrecioGrabar(ListaPrecio datoGraba)
        {
            RepositoryGenerico<ListaPrecio> repository = new RepositoryGenerico<ListaPrecio>();
            ListaPrecio dato;

            if (datoGraba.Id == -1)
                dato = new ListaPrecio();
            else
            {
                dato = repository.Obtener(datoGraba.Id);
                if (dato == null) throw new ApplicationException("No existe Lista de Precio");
            }

            dato.Vigente = datoGraba.Vigente;
            dato.Descripcion = datoGraba.Descripcion;
            dato.Codigo = datoGraba.Codigo;
            dato.Precio = datoGraba.Precio;

            repository.Actualizar(dato);

            return dato;
        }

        public ListaPrecio ListaPrecioEliminar(int id)
        {
            RepositoryGenerico<ListaPrecio> repository = new RepositoryGenerico<ListaPrecio>();
            ListaPrecio dato;

            dato = repository.Obtener(id);

            if (dato == null)
                throw new ApplicationException("No existe Lista de Precio");

            repository.Eliminar(dato);

            return dato;
        }
        #endregion

        #region ListaPrecio por Cliente
        public List<ListaPrecioCliente> ListaPrecioClienteObtenerVigentesCache()
        {
            ServicioGenerico servicio = new ServicioGenerico();
            List<ListaPrecioCliente> listReturn = new List<ListaPrecioCliente>();

            var tiposCache = CacheManager.GetToCache<List<ListaPrecioCliente>>(gobalKeyCache, "GetListaPrecioCliente");

            if (tiposCache == null)
            {
                listReturn = servicio.Listar<ListaPrecioCliente>().ToList<ListaPrecioCliente>();
                if (listReturn == null) listReturn = new List<ListaPrecioCliente>();
                CacheManager.AddToCache(gobalKeyCache, "GetListaPrecioCliente", listReturn);
            }
            else
            {
                listReturn = tiposCache;
            }
            //listReturn = servicio.Listar<ListaPrecioCliente>().ToList<ListaPrecioCliente>();

            return listReturn;
        }
        public ListaPrecioCliente ListaPrecioClienteGrabar(ListaPrecioCliente datoGraba)
        {
            RepositoryGenerico<ListaPrecioCliente> repository = new RepositoryGenerico<ListaPrecioCliente>();
            ListaPrecioCliente dato;

            if (datoGraba.Id == -1)
                dato = new ListaPrecioCliente();
            else
            {
                dato = repository.Obtener(datoGraba.Id);
                if (dato == null) throw new ApplicationException("No existe Lista de Precio");
            }

            dato.Vigente = datoGraba.Vigente;
            dato.Descripcion = datoGraba.Descripcion;
            dato.Codigo = datoGraba.Codigo;
            dato.Precio = datoGraba.Precio;
            dato.ListaPrecio = this.ObtenerObjeto<ListaPrecio>(datoGraba.ListaPrecio.Id);

            repository.Actualizar(dato);

            return dato;
        }

        public ListaPrecioCliente ListaPrecioClienteEliminar(int id)
        {
            RepositoryGenerico<ListaPrecioCliente> repository = new RepositoryGenerico<ListaPrecioCliente>();
            ListaPrecioCliente dato;

            dato = repository.Obtener(id);

            if (dato == null)
                throw new ApplicationException("No existe Lista de Precio");

            repository.Eliminar(dato);

            return dato;
        }
        #endregion

        #region CotizacionDolar
        public List<CotizacionDolar> CotizacionDolarObtenerCache()
        {
            List<CotizacionDolar> listReturn = new List<CotizacionDolar>();

            var dataCache = CacheManager.GetToCache<List<CotizacionDolar>>(gobalKeyCache, "GetCotizacionDolar");

            if (dataCache == null)
                listReturn = this.CotizacionDolarActualizarCache();
            else
                listReturn = dataCache;

            return listReturn;
        }
        public List<CotizacionDolar> CotizacionDolarActualizarCache()
        {
            List<CotizacionDolar> listReturn = this.Listar<CotizacionDolar>().ToList<CotizacionDolar>();
            CacheManager.AddToCache(gobalKeyCache, "GetCotizacionDolar", listReturn);
            return listReturn;
        }
        public CotizacionDolar CotizacionDolarVigente()
        {
            CotizacionDolar dato = null;

            if (this.CotizacionDolarObtenerCache().Count > 0)
                dato = this.CotizacionDolarObtenerCache()
                            .OrderByDescending(item => item.Fecha)
                            .First();

            if (dato == null)
            {
                dato = new CotizacionDolar();
                dato.Cotizacion = 1;
                dato.Fecha = DateTime.Now;
            }
            return dato;
        }
        public CotizacionDolar CotizacionDolarGrabar(CotizacionDolar datoGraba)
        {
            RepositoryGenerico<CotizacionDolar> repository = new RepositoryGenerico<CotizacionDolar>();
            CotizacionDolar dato;

            if (datoGraba.Fecha == DateTime.MinValue)
                datoGraba.Fecha = DateTime.Now;

            CotizacionDolar existe = this.Listar<CotizacionDolar>()
                                        .Find(item => item.FechaToString == datoGraba.FechaToString);

            if (existe == null)
                dato = new CotizacionDolar();
            else
                dato = repository.Obtener(existe.Id);
            
            dato.Cotizacion = datoGraba.Cotizacion;
            dato.Fecha = datoGraba.Fecha;

            repository.Actualizar(dato);
            
            return dato;
        }
        public CotizacionDolar CotizacionDolarEliminar(int id)
        {
            RepositoryGenerico<CotizacionDolar> repository = new RepositoryGenerico<CotizacionDolar>();
            CotizacionDolar dato;

            dato = repository.Obtener(id);

            if (dato == null)
                throw new ApplicationException("No existe Cotización");

            repository.Eliminar(dato);

            return dato;
        }
        #endregion
    }        
}
